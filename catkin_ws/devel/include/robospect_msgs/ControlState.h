// Generated by gencpp from file robospect_msgs/ControlState.msg
// DO NOT EDIT!


#ifndef ROBOSPECT_MSGS_MESSAGE_CONTROLSTATE_H
#define ROBOSPECT_MSGS_MESSAGE_CONTROLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robospect_msgs/State.h>

namespace robospect_msgs
{
template <class ContainerAllocator>
struct ControlState_
{
  typedef ControlState_<ContainerAllocator> Type;

  ControlState_()
    : state()
    , mission_state(0)
    , robot_status(0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_yaw(0.0)
    , velocity(0.0)
    , battery_voltage(0.0)
    , battery_percentage(0.0)  {
    }
  ControlState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , mission_state(0)
    , robot_status(0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_yaw(0.0)
    , velocity(0.0)
    , battery_voltage(0.0)
    , battery_percentage(0.0)  {
  (void)_alloc;
    }



   typedef  ::robospect_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef int32_t _mission_state_type;
  _mission_state_type mission_state;

   typedef int32_t _robot_status_type;
  _robot_status_type robot_status;

   typedef float _pose_x_type;
  _pose_x_type pose_x;

   typedef float _pose_y_type;
  _pose_y_type pose_y;

   typedef float _pose_yaw_type;
  _pose_yaw_type pose_yaw;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef float _battery_percentage_type;
  _battery_percentage_type battery_percentage;



  enum {
    ROBOT_STOPPED = 0,
    DEFECT_DETECTION = 1,
    LASER_SCAN = 2,
    SEND_DISTANCE_FROM_WALL = 3,
    LOCATE_CRACK_POSITION = 4,
    MOVE_CRANE_TO_CRACK = 5,
    CAPTURE_3D_CRACK_SNAPSHOT = 6,
    MOVE_ARM_TO_CRACK = 8,
    MEASURE_CRACK = 9,
    CAPTURE_3D_CRACK_SNAPSHOT_OF_SENSOR = 10,
    ROBOT_MOVING_TO_NEXT_POINT = 11,
  };


  typedef boost::shared_ptr< ::robospect_msgs::ControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robospect_msgs::ControlState_<ContainerAllocator> const> ConstPtr;

}; // struct ControlState_

typedef ::robospect_msgs::ControlState_<std::allocator<void> > ControlState;

typedef boost::shared_ptr< ::robospect_msgs::ControlState > ControlStatePtr;
typedef boost::shared_ptr< ::robospect_msgs::ControlState const> ControlStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robospect_msgs::ControlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robospect_msgs::ControlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robospect_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robospect_msgs': ['/home/jaydeep/catkin_ws/src/robospect_common/robospect_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::ControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::ControlState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::ControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::ControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::ControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::ControlState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robospect_msgs::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fcaac5fabdba48ca3ff538da6d41794";
  }

  static const char* value(const ::robospect_msgs::ControlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fcaac5fabdba48cULL;
  static const uint64_t static_value2 = 0xa3ff538da6d41794ULL;
};

template<class ContainerAllocator>
struct DataType< ::robospect_msgs::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robospect_msgs/ControlState";
  }

  static const char* value(const ::robospect_msgs::ControlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robospect_msgs::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Robot mission states definition\n\
int32 ROBOT_STOPPED=0				# 0. Robot is stopped\n\
int32 DEFECT_DETECTION=1			# 1. Defect Detection Cameras take snapshot\n\
int32 LASER_SCAN=2				# 3. 3D Laser Scanner takes Measurement\n\
int32 SEND_DISTANCE_FROM_WALL=3			# 4. Robotic Platform sends distance from wall to computer vision system (from robotic laser)\n\
int32 LOCATE_CRACK_POSITION=4			# 5. Computer Vision calculates X Y Z coordinates of crack\n\
int32 MOVE_CRANE_TO_CRACK=5			# 6. Robotic Crane or Tip move closer to crack\n\
int32 CAPTURE_3D_CRACK_SNAPSHOT=6		# 7. Stereo Cameras getting 3D snapshot of crack\n\
int32 MOVE_ARM_TO_CRACK=8			# 8. UltraSonic Sensors Attached to the wall (on crack)\n\
int32 MEASURE_CRACK=9				# 9. UltraSonic Sensors take measurement\n\
int32 CAPTURE_3D_CRACK_SNAPSHOT_OF_SENSOR=10	# 10. Stereo Cameras take stereo-image of sensor onto crack\n\
int32 ROBOT_MOVING_TO_NEXT_POINT=11		# 11. Robot moves to next position and proceeds 1 step*\n\
\n\
# Robot general state\n\
State state\n\
\n\
# Robot mission state\n\
int32 mission_state\n\
\n\
# Robot status\n\
int32 robot_status\n\
\n\
# Robot pose (m)\n\
float32 pose_x\n\
float32 pose_y\n\
# (radians)\n\
float32 pose_yaw\n\
\n\
# Robot velocity (m/s)\n\
float32 velocity\n\
\n\
# Robot battery\n\
float32 battery_voltage\n\
float32 battery_percentage\n\
\n\
# Components status?\n\
\n\
\n\
\n\
================================================================================\n\
MSG: robospect_msgs/State\n\
# constants\n\
int32 INIT_STATE = 100\n\
int32 STANDBY_STATE = 200\n\
int32 READY_STATE = 300\n\
int32 EMERGENCY_STATE = 400\n\
int32 FAILURE_STATE = 500\n\
int32 SHUTDOWN_STATE = 600\n\
int32 UNKNOWN_STATE = 700\n\
int32 MANUAL_STATE = 800\n\
int32 SPECIAL_STATE = 900\n\
int32 CHARGE_STATE = 1000\n\
int32 PARKING_STATE = 1100\n\
\n\
# state of the component\n\
int32 state\n\
# desired control loop frecuency\n\
float32 desired_freq\n\
# real frecuency \n\
float32 real_freq\n\
# Description of the state\n\
string state_description\n\
# Control mode (POSITION, VELOCITY)\n\
string control_mode\n\
";
  }

  static const char* value(const ::robospect_msgs::ControlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robospect_msgs::ControlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.mission_state);
      stream.next(m.robot_status);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_yaw);
      stream.next(m.velocity);
      stream.next(m.battery_voltage);
      stream.next(m.battery_percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robospect_msgs::ControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robospect_msgs::ControlState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::robospect_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "mission_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission_state);
    s << indent << "robot_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_status);
    s << indent << "pose_x: ";
    Printer<float>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<float>::stream(s, indent + "  ", v.pose_y);
    s << indent << "pose_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.pose_yaw);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSPECT_MSGS_MESSAGE_CONTROLSTATE_H
