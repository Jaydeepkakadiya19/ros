// Generated by gencpp from file robospect_msgs/PlatformState.msg
// DO NOT EDIT!


#ifndef ROBOSPECT_MSGS_MESSAGE_PLATFORMSTATE_H
#define ROBOSPECT_MSGS_MESSAGE_PLATFORMSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robospect_msgs
{
template <class ContainerAllocator>
struct PlatformState_
{
  typedef PlatformState_<ContainerAllocator> Type;

  PlatformState_()
    : vehicle_x(0.0)
    , vehicle_y(0.0)
    , vehicle_theta(0.0)
    , vehicle_linear_speed(0.0)
    , vehicle_angular_speed(0.0)
    , crane_x(0.0)
    , crane_y(0.0)
    , crane_z(0.0)
    , crane_q1(0.0)
    , crane_q2(0.0)
    , crane_q3(0.0)
    , crane_q4(0.0)
    , crane_joints()
    , pan_angle(0.0)
    , tilt_angle(0.0)
    , battery_level(0.0)
    , state()
    , command()  {
    }
  PlatformState_(const ContainerAllocator& _alloc)
    : vehicle_x(0.0)
    , vehicle_y(0.0)
    , vehicle_theta(0.0)
    , vehicle_linear_speed(0.0)
    , vehicle_angular_speed(0.0)
    , crane_x(0.0)
    , crane_y(0.0)
    , crane_z(0.0)
    , crane_q1(0.0)
    , crane_q2(0.0)
    , crane_q3(0.0)
    , crane_q4(0.0)
    , crane_joints(_alloc)
    , pan_angle(0.0)
    , tilt_angle(0.0)
    , battery_level(0.0)
    , state(_alloc)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef float _vehicle_x_type;
  _vehicle_x_type vehicle_x;

   typedef float _vehicle_y_type;
  _vehicle_y_type vehicle_y;

   typedef float _vehicle_theta_type;
  _vehicle_theta_type vehicle_theta;

   typedef float _vehicle_linear_speed_type;
  _vehicle_linear_speed_type vehicle_linear_speed;

   typedef float _vehicle_angular_speed_type;
  _vehicle_angular_speed_type vehicle_angular_speed;

   typedef float _crane_x_type;
  _crane_x_type crane_x;

   typedef float _crane_y_type;
  _crane_y_type crane_y;

   typedef float _crane_z_type;
  _crane_z_type crane_z;

   typedef float _crane_q1_type;
  _crane_q1_type crane_q1;

   typedef float _crane_q2_type;
  _crane_q2_type crane_q2;

   typedef float _crane_q3_type;
  _crane_q3_type crane_q3;

   typedef float _crane_q4_type;
  _crane_q4_type crane_q4;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _crane_joints_type;
  _crane_joints_type crane_joints;

   typedef float _pan_angle_type;
  _pan_angle_type pan_angle;

   typedef float _tilt_angle_type;
  _tilt_angle_type tilt_angle;

   typedef float _battery_level_type;
  _battery_level_type battery_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::robospect_msgs::PlatformState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robospect_msgs::PlatformState_<ContainerAllocator> const> ConstPtr;

}; // struct PlatformState_

typedef ::robospect_msgs::PlatformState_<std::allocator<void> > PlatformState;

typedef boost::shared_ptr< ::robospect_msgs::PlatformState > PlatformStatePtr;
typedef boost::shared_ptr< ::robospect_msgs::PlatformState const> PlatformStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robospect_msgs::PlatformState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robospect_msgs::PlatformState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robospect_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robospect_msgs': ['/home/jaydeep/catkin_ws/src/robospect_common/robospect_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::PlatformState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::PlatformState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::PlatformState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::PlatformState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::PlatformState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::PlatformState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robospect_msgs::PlatformState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9adf2284a8ec36395056b1ed29664223";
  }

  static const char* value(const ::robospect_msgs::PlatformState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9adf2284a8ec3639ULL;
  static const uint64_t static_value2 = 0x5056b1ed29664223ULL;
};

template<class ContainerAllocator>
struct DataType< ::robospect_msgs::PlatformState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robospect_msgs/PlatformState";
  }

  static const char* value(const ::robospect_msgs::PlatformState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robospect_msgs::PlatformState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#State of the vehicle+crane system\n\
\n\
#Vehicle position+orientation\n\
float32 vehicle_x\n\
float32 vehicle_y\n\
float32 vehicle_theta\n\
#Vehicle velocities\n\
float32 vehicle_linear_speed\n\
float32 vehicle_angular_speed\n\
\n\
#Crane position+orientation\n\
float32 crane_x\n\
float32 crane_y\n\
float32 crane_z\n\
float32 crane_q1\n\
float32 crane_q2\n\
float32 crane_q3\n\
float32 crane_q4\n\
\n\
#Crane joints\n\
float32[] crane_joints\n\
\n\
#Pan&Tilt Angles\n\
float32 pan_angle\n\
float32 tilt_angle\n\
\n\
#Vehicle battery level\n\
float32 battery_level\n\
\n\
#Vehicle State\n\
#int32 ROBOT_STOPPED = 0\n\
#int32 WAITING_FOR_COMMAND = 1\n\
#int32 VEHICLE_MOVING = 2\n\
#int32 CRANE_MOVING = 3\n\
#int32 FOLDING_CRANE = 4\n\
#int32 state\n\
string state\n\
\n\
# Command being executed\n\
string command\n\
";
  }

  static const char* value(const ::robospect_msgs::PlatformState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robospect_msgs::PlatformState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_x);
      stream.next(m.vehicle_y);
      stream.next(m.vehicle_theta);
      stream.next(m.vehicle_linear_speed);
      stream.next(m.vehicle_angular_speed);
      stream.next(m.crane_x);
      stream.next(m.crane_y);
      stream.next(m.crane_z);
      stream.next(m.crane_q1);
      stream.next(m.crane_q2);
      stream.next(m.crane_q3);
      stream.next(m.crane_q4);
      stream.next(m.crane_joints);
      stream.next(m.pan_angle);
      stream.next(m.tilt_angle);
      stream.next(m.battery_level);
      stream.next(m.state);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlatformState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robospect_msgs::PlatformState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robospect_msgs::PlatformState_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_x: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_x);
    s << indent << "vehicle_y: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_y);
    s << indent << "vehicle_theta: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_theta);
    s << indent << "vehicle_linear_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_linear_speed);
    s << indent << "vehicle_angular_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_angular_speed);
    s << indent << "crane_x: ";
    Printer<float>::stream(s, indent + "  ", v.crane_x);
    s << indent << "crane_y: ";
    Printer<float>::stream(s, indent + "  ", v.crane_y);
    s << indent << "crane_z: ";
    Printer<float>::stream(s, indent + "  ", v.crane_z);
    s << indent << "crane_q1: ";
    Printer<float>::stream(s, indent + "  ", v.crane_q1);
    s << indent << "crane_q2: ";
    Printer<float>::stream(s, indent + "  ", v.crane_q2);
    s << indent << "crane_q3: ";
    Printer<float>::stream(s, indent + "  ", v.crane_q3);
    s << indent << "crane_q4: ";
    Printer<float>::stream(s, indent + "  ", v.crane_q4);
    s << indent << "crane_joints[]" << std::endl;
    for (size_t i = 0; i < v.crane_joints.size(); ++i)
    {
      s << indent << "  crane_joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.crane_joints[i]);
    }
    s << indent << "pan_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pan_angle);
    s << indent << "tilt_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_angle);
    s << indent << "battery_level: ";
    Printer<float>::stream(s, indent + "  ", v.battery_level);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSPECT_MSGS_MESSAGE_PLATFORMSTATE_H
