// Generated by gencpp from file robospect_msgs/State.msg
// DO NOT EDIT!


#ifndef ROBOSPECT_MSGS_MESSAGE_STATE_H
#define ROBOSPECT_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robospect_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : state(0)
    , desired_freq(0.0)
    , real_freq(0.0)
    , state_description()
    , control_mode()  {
    }
  State_(const ContainerAllocator& _alloc)
    : state(0)
    , desired_freq(0.0)
    , real_freq(0.0)
    , state_description(_alloc)
    , control_mode(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;

   typedef float _desired_freq_type;
  _desired_freq_type desired_freq;

   typedef float _real_freq_type;
  _real_freq_type real_freq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_description_type;
  _state_description_type state_description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_mode_type;
  _control_mode_type control_mode;



  enum {
    INIT_STATE = 100,
    STANDBY_STATE = 200,
    READY_STATE = 300,
    EMERGENCY_STATE = 400,
    FAILURE_STATE = 500,
    SHUTDOWN_STATE = 600,
    UNKNOWN_STATE = 700,
    MANUAL_STATE = 800,
    SPECIAL_STATE = 900,
    CHARGE_STATE = 1000,
    PARKING_STATE = 1100,
  };


  typedef boost::shared_ptr< ::robospect_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robospect_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::robospect_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::robospect_msgs::State > StatePtr;
typedef boost::shared_ptr< ::robospect_msgs::State const> StateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robospect_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robospect_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robospect_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robospect_msgs': ['/home/jaydeep/catkin_ws/src/robospect_common/robospect_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robospect_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfca35ea56f7d6866bf502504f711dc8";
  }

  static const char* value(const ::robospect_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfca35ea56f7d686ULL;
  static const uint64_t static_value2 = 0x6bf502504f711dc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robospect_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robospect_msgs/State";
  }

  static const char* value(const ::robospect_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robospect_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# constants\n\
int32 INIT_STATE = 100\n\
int32 STANDBY_STATE = 200\n\
int32 READY_STATE = 300\n\
int32 EMERGENCY_STATE = 400\n\
int32 FAILURE_STATE = 500\n\
int32 SHUTDOWN_STATE = 600\n\
int32 UNKNOWN_STATE = 700\n\
int32 MANUAL_STATE = 800\n\
int32 SPECIAL_STATE = 900\n\
int32 CHARGE_STATE = 1000\n\
int32 PARKING_STATE = 1100\n\
\n\
# state of the component\n\
int32 state\n\
# desired control loop frecuency\n\
float32 desired_freq\n\
# real frecuency \n\
float32 real_freq\n\
# Description of the state\n\
string state_description\n\
# Control mode (POSITION, VELOCITY)\n\
string control_mode\n\
";
  }

  static const char* value(const ::robospect_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robospect_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.desired_freq);
      stream.next(m.real_freq);
      stream.next(m.state_description);
      stream.next(m.control_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robospect_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robospect_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "desired_freq: ";
    Printer<float>::stream(s, indent + "  ", v.desired_freq);
    s << indent << "real_freq: ";
    Printer<float>::stream(s, indent + "  ", v.real_freq);
    s << indent << "state_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_description);
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSPECT_MSGS_MESSAGE_STATE_H
