// Generated by gencpp from file robospect_msgs/MissionState.msg
// DO NOT EDIT!


#ifndef ROBOSPECT_MSGS_MESSAGE_MISSIONSTATE_H
#define ROBOSPECT_MSGS_MESSAGE_MISSIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robospect_msgs/MissionPoint.h>
#include <robospect_msgs/PlatformState.h>

namespace robospect_msgs
{
template <class ContainerAllocator>
struct MissionState_
{
  typedef MissionState_<ContainerAllocator> Type;

  MissionState_()
    : mission_state()
    , max_distance(0.0)
    , traveled_distance(0.0)
    , step_meters(0.0)
    , minimum_crack_length(0.0)
    , max_cracks(0.0)
    , mission_command()
    , points()
    , current_point(0)
    , vehicle_state()
    , tip_x(0.0)
    , tip_y(0.0)
    , tip_z(0.0)
    , tip_q1(0.0)
    , tip_q2(0.0)
    , tip_q3(0.0)
    , tip_q4(0.0)
    , arm_joints()
    , arm_state()
    , camera_state()
    , image_file_name1()
    , image_file_name2()
    , profile_file_name()
    , stereo_file_name1()
    , stereo_file_name2()
    , crack_pixel_x(0)
    , crack_pixel_y(0)
    , crack_position_x(0.0)
    , crack_position_y(0.0)
    , crack_position_z(0.0)
    , crack_orientation_a(0.0)
    , crack_orientation_b(0.0)
    , crack_orientation_c(0.0)
    , ultrasonic_state()
    , crack_width(0.0)
    , crack_depth(0.0)  {
    }
  MissionState_(const ContainerAllocator& _alloc)
    : mission_state(_alloc)
    , max_distance(0.0)
    , traveled_distance(0.0)
    , step_meters(0.0)
    , minimum_crack_length(0.0)
    , max_cracks(0.0)
    , mission_command(_alloc)
    , points(_alloc)
    , current_point(0)
    , vehicle_state(_alloc)
    , tip_x(0.0)
    , tip_y(0.0)
    , tip_z(0.0)
    , tip_q1(0.0)
    , tip_q2(0.0)
    , tip_q3(0.0)
    , tip_q4(0.0)
    , arm_joints(_alloc)
    , arm_state(_alloc)
    , camera_state(_alloc)
    , image_file_name1(_alloc)
    , image_file_name2(_alloc)
    , profile_file_name(_alloc)
    , stereo_file_name1(_alloc)
    , stereo_file_name2(_alloc)
    , crack_pixel_x(0)
    , crack_pixel_y(0)
    , crack_position_x(0.0)
    , crack_position_y(0.0)
    , crack_position_z(0.0)
    , crack_orientation_a(0.0)
    , crack_orientation_b(0.0)
    , crack_orientation_c(0.0)
    , ultrasonic_state(_alloc)
    , crack_width(0.0)
    , crack_depth(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_state_type;
  _mission_state_type mission_state;

   typedef float _max_distance_type;
  _max_distance_type max_distance;

   typedef float _traveled_distance_type;
  _traveled_distance_type traveled_distance;

   typedef float _step_meters_type;
  _step_meters_type step_meters;

   typedef float _minimum_crack_length_type;
  _minimum_crack_length_type minimum_crack_length;

   typedef float _max_cracks_type;
  _max_cracks_type max_cracks;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_command_type;
  _mission_command_type mission_command;

   typedef std::vector< ::robospect_msgs::MissionPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robospect_msgs::MissionPoint_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef int16_t _current_point_type;
  _current_point_type current_point;

   typedef  ::robospect_msgs::PlatformState_<ContainerAllocator>  _vehicle_state_type;
  _vehicle_state_type vehicle_state;

   typedef float _tip_x_type;
  _tip_x_type tip_x;

   typedef float _tip_y_type;
  _tip_y_type tip_y;

   typedef float _tip_z_type;
  _tip_z_type tip_z;

   typedef float _tip_q1_type;
  _tip_q1_type tip_q1;

   typedef float _tip_q2_type;
  _tip_q2_type tip_q2;

   typedef float _tip_q3_type;
  _tip_q3_type tip_q3;

   typedef float _tip_q4_type;
  _tip_q4_type tip_q4;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _arm_joints_type;
  _arm_joints_type arm_joints;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arm_state_type;
  _arm_state_type arm_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_state_type;
  _camera_state_type camera_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _image_file_name1_type;
  _image_file_name1_type image_file_name1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _image_file_name2_type;
  _image_file_name2_type image_file_name2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _profile_file_name_type;
  _profile_file_name_type profile_file_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stereo_file_name1_type;
  _stereo_file_name1_type stereo_file_name1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stereo_file_name2_type;
  _stereo_file_name2_type stereo_file_name2;

   typedef int16_t _crack_pixel_x_type;
  _crack_pixel_x_type crack_pixel_x;

   typedef int16_t _crack_pixel_y_type;
  _crack_pixel_y_type crack_pixel_y;

   typedef float _crack_position_x_type;
  _crack_position_x_type crack_position_x;

   typedef float _crack_position_y_type;
  _crack_position_y_type crack_position_y;

   typedef float _crack_position_z_type;
  _crack_position_z_type crack_position_z;

   typedef float _crack_orientation_a_type;
  _crack_orientation_a_type crack_orientation_a;

   typedef float _crack_orientation_b_type;
  _crack_orientation_b_type crack_orientation_b;

   typedef float _crack_orientation_c_type;
  _crack_orientation_c_type crack_orientation_c;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ultrasonic_state_type;
  _ultrasonic_state_type ultrasonic_state;

   typedef float _crack_width_type;
  _crack_width_type crack_width;

   typedef float _crack_depth_type;
  _crack_depth_type crack_depth;





  typedef boost::shared_ptr< ::robospect_msgs::MissionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robospect_msgs::MissionState_<ContainerAllocator> const> ConstPtr;

}; // struct MissionState_

typedef ::robospect_msgs::MissionState_<std::allocator<void> > MissionState;

typedef boost::shared_ptr< ::robospect_msgs::MissionState > MissionStatePtr;
typedef boost::shared_ptr< ::robospect_msgs::MissionState const> MissionStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robospect_msgs::MissionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robospect_msgs::MissionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robospect_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robospect_msgs': ['/home/jaydeep/catkin_ws/src/robospect_common-master/robospect_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::MissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robospect_msgs::MissionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::MissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robospect_msgs::MissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::MissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robospect_msgs::MissionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robospect_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0aa03f571a2e38d59ccaad05aabff493";
  }

  static const char* value(const ::robospect_msgs::MissionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0aa03f571a2e38d5ULL;
  static const uint64_t static_value2 = 0x9ccaad05aabff493ULL;
};

template<class ContainerAllocator>
struct DataType< ::robospect_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robospect_msgs/MissionState";
  }

  static const char* value(const ::robospect_msgs::MissionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robospect_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Mission state from IGC to GCS\n\
\n\
#Mission State\n\
string mission_state\n\
\n\
#Mission Parameters\n\
float32 max_distance\n\
float32 traveled_distance\n\
float32 step_meters\n\
float32 minimum_crack_length\n\
float32 max_cracks\n\
string mission_command\n\
MissionPoint[] points\n\
int16 current_point\n\
\n\
#Vehicle State\n\
PlatformState vehicle_state\n\
\n\
#Arm State\n\
float32 tip_x\n\
float32 tip_y\n\
float32 tip_z\n\
float32 tip_q1\n\
float32 tip_q2\n\
float32 tip_q3\n\
float32 tip_q4\n\
float32[] arm_joints\n\
string arm_state\n\
\n\
#Camera State\n\
string camera_state\n\
string image_file_name1\n\
string image_file_name2\n\
string profile_file_name\n\
string stereo_file_name1\n\
string stereo_file_name2\n\
int16 crack_pixel_x\n\
int16 crack_pixel_y\n\
float32 crack_position_x\n\
float32 crack_position_y\n\
float32 crack_position_z\n\
float32 crack_orientation_a\n\
float32 crack_orientation_b\n\
float32 crack_orientation_c\n\
\n\
#Ultrasonic State\n\
string ultrasonic_state\n\
float32 crack_width\n\
float32 crack_depth\n\
\n\
================================================================================\n\
MSG: robospect_msgs/MissionPoint\n\
# Mission Point (from GCS to IGC)\n\
\n\
# Tunnel point\n\
geometry_msgs/Point point\n\
\n\
#Inspection parameters\n\
bool do_crack_detection\n\
bool do_3D_scan\n\
bool do_stereo_image\n\
bool do_ultrasonic_measurements\n\
bool do_teleop_us\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: robospect_msgs/PlatformState\n\
#State of the vehicle+crane system\n\
\n\
#Vehicle position+orientation\n\
float32 vehicle_x\n\
float32 vehicle_y\n\
float32 vehicle_theta\n\
#Vehicle velocities\n\
float32 vehicle_linear_speed\n\
float32 vehicle_angular_speed\n\
\n\
#Crane position+orientation\n\
float32 crane_x\n\
float32 crane_y\n\
float32 crane_z\n\
float32 crane_q1\n\
float32 crane_q2\n\
float32 crane_q3\n\
float32 crane_q4\n\
\n\
#Crane joints\n\
float32[] crane_joints\n\
\n\
#Pan&Tilt Angles\n\
float32 pan_angle\n\
float32 tilt_angle\n\
\n\
#Vehicle battery level\n\
float32 battery_level\n\
\n\
#Vehicle State\n\
#int32 ROBOT_STOPPED = 0\n\
#int32 WAITING_FOR_COMMAND = 1\n\
#int32 VEHICLE_MOVING = 2\n\
#int32 CRANE_MOVING = 3\n\
#int32 FOLDING_CRANE = 4\n\
#int32 state\n\
string state\n\
\n\
# Command being executed\n\
string command\n\
";
  }

  static const char* value(const ::robospect_msgs::MissionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robospect_msgs::MissionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_state);
      stream.next(m.max_distance);
      stream.next(m.traveled_distance);
      stream.next(m.step_meters);
      stream.next(m.minimum_crack_length);
      stream.next(m.max_cracks);
      stream.next(m.mission_command);
      stream.next(m.points);
      stream.next(m.current_point);
      stream.next(m.vehicle_state);
      stream.next(m.tip_x);
      stream.next(m.tip_y);
      stream.next(m.tip_z);
      stream.next(m.tip_q1);
      stream.next(m.tip_q2);
      stream.next(m.tip_q3);
      stream.next(m.tip_q4);
      stream.next(m.arm_joints);
      stream.next(m.arm_state);
      stream.next(m.camera_state);
      stream.next(m.image_file_name1);
      stream.next(m.image_file_name2);
      stream.next(m.profile_file_name);
      stream.next(m.stereo_file_name1);
      stream.next(m.stereo_file_name2);
      stream.next(m.crack_pixel_x);
      stream.next(m.crack_pixel_y);
      stream.next(m.crack_position_x);
      stream.next(m.crack_position_y);
      stream.next(m.crack_position_z);
      stream.next(m.crack_orientation_a);
      stream.next(m.crack_orientation_b);
      stream.next(m.crack_orientation_c);
      stream.next(m.ultrasonic_state);
      stream.next(m.crack_width);
      stream.next(m.crack_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robospect_msgs::MissionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robospect_msgs::MissionState_<ContainerAllocator>& v)
  {
    s << indent << "mission_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_state);
    s << indent << "max_distance: ";
    Printer<float>::stream(s, indent + "  ", v.max_distance);
    s << indent << "traveled_distance: ";
    Printer<float>::stream(s, indent + "  ", v.traveled_distance);
    s << indent << "step_meters: ";
    Printer<float>::stream(s, indent + "  ", v.step_meters);
    s << indent << "minimum_crack_length: ";
    Printer<float>::stream(s, indent + "  ", v.minimum_crack_length);
    s << indent << "max_cracks: ";
    Printer<float>::stream(s, indent + "  ", v.max_cracks);
    s << indent << "mission_command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_command);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robospect_msgs::MissionPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "current_point: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current_point);
    s << indent << "vehicle_state: ";
    s << std::endl;
    Printer< ::robospect_msgs::PlatformState_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_state);
    s << indent << "tip_x: ";
    Printer<float>::stream(s, indent + "  ", v.tip_x);
    s << indent << "tip_y: ";
    Printer<float>::stream(s, indent + "  ", v.tip_y);
    s << indent << "tip_z: ";
    Printer<float>::stream(s, indent + "  ", v.tip_z);
    s << indent << "tip_q1: ";
    Printer<float>::stream(s, indent + "  ", v.tip_q1);
    s << indent << "tip_q2: ";
    Printer<float>::stream(s, indent + "  ", v.tip_q2);
    s << indent << "tip_q3: ";
    Printer<float>::stream(s, indent + "  ", v.tip_q3);
    s << indent << "tip_q4: ";
    Printer<float>::stream(s, indent + "  ", v.tip_q4);
    s << indent << "arm_joints[]" << std::endl;
    for (size_t i = 0; i < v.arm_joints.size(); ++i)
    {
      s << indent << "  arm_joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arm_joints[i]);
    }
    s << indent << "arm_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arm_state);
    s << indent << "camera_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_state);
    s << indent << "image_file_name1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.image_file_name1);
    s << indent << "image_file_name2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.image_file_name2);
    s << indent << "profile_file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.profile_file_name);
    s << indent << "stereo_file_name1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stereo_file_name1);
    s << indent << "stereo_file_name2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stereo_file_name2);
    s << indent << "crack_pixel_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.crack_pixel_x);
    s << indent << "crack_pixel_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.crack_pixel_y);
    s << indent << "crack_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.crack_position_x);
    s << indent << "crack_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.crack_position_y);
    s << indent << "crack_position_z: ";
    Printer<float>::stream(s, indent + "  ", v.crack_position_z);
    s << indent << "crack_orientation_a: ";
    Printer<float>::stream(s, indent + "  ", v.crack_orientation_a);
    s << indent << "crack_orientation_b: ";
    Printer<float>::stream(s, indent + "  ", v.crack_orientation_b);
    s << indent << "crack_orientation_c: ";
    Printer<float>::stream(s, indent + "  ", v.crack_orientation_c);
    s << indent << "ultrasonic_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ultrasonic_state);
    s << indent << "crack_width: ";
    Printer<float>::stream(s, indent + "  ", v.crack_width);
    s << indent << "crack_depth: ";
    Printer<float>::stream(s, indent + "  ", v.crack_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSPECT_MSGS_MESSAGE_MISSIONSTATE_H
