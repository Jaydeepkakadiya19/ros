# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robospect_msgs/MissionPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MissionPoint(genpy.Message):
  _md5sum = "e09177a0ebb8aa226b0293db5898c1dc"
  _type = "robospect_msgs/MissionPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Mission Point (from GCS to IGC)

# Tunnel point
geometry_msgs/Point point

#Inspection parameters
bool do_crack_detection
bool do_3D_scan
bool do_stereo_image
bool do_ultrasonic_measurements
bool do_teleop_us

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['point','do_crack_detection','do_3D_scan','do_stereo_image','do_ultrasonic_measurements','do_teleop_us']
  _slot_types = ['geometry_msgs/Point','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,do_crack_detection,do_3D_scan,do_stereo_image,do_ultrasonic_measurements,do_teleop_us

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.do_crack_detection is None:
        self.do_crack_detection = False
      if self.do_3D_scan is None:
        self.do_3D_scan = False
      if self.do_stereo_image is None:
        self.do_stereo_image = False
      if self.do_ultrasonic_measurements is None:
        self.do_ultrasonic_measurements = False
      if self.do_teleop_us is None:
        self.do_teleop_us = False
    else:
      self.point = geometry_msgs.msg.Point()
      self.do_crack_detection = False
      self.do_3D_scan = False
      self.do_stereo_image = False
      self.do_ultrasonic_measurements = False
      self.do_teleop_us = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d5B().pack(_x.point.x, _x.point.y, _x.point.z, _x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.point.x, _x.point.y, _x.point.z, _x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us,) = _get_struct_3d5B().unpack(str[start:end])
      self.do_crack_detection = bool(self.do_crack_detection)
      self.do_3D_scan = bool(self.do_3D_scan)
      self.do_stereo_image = bool(self.do_stereo_image)
      self.do_ultrasonic_measurements = bool(self.do_ultrasonic_measurements)
      self.do_teleop_us = bool(self.do_teleop_us)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d5B().pack(_x.point.x, _x.point.y, _x.point.z, _x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.point.x, _x.point.y, _x.point.z, _x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us,) = _get_struct_3d5B().unpack(str[start:end])
      self.do_crack_detection = bool(self.do_crack_detection)
      self.do_3D_scan = bool(self.do_3D_scan)
      self.do_stereo_image = bool(self.do_stereo_image)
      self.do_ultrasonic_measurements = bool(self.do_ultrasonic_measurements)
      self.do_teleop_us = bool(self.do_teleop_us)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d5B = None
def _get_struct_3d5B():
    global _struct_3d5B
    if _struct_3d5B is None:
        _struct_3d5B = struct.Struct("<3d5B")
    return _struct_3d5B
