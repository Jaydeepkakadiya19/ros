# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robospect_msgs/PlatformState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlatformState(genpy.Message):
  _md5sum = "9adf2284a8ec36395056b1ed29664223"
  _type = "robospect_msgs/PlatformState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#State of the vehicle+crane system

#Vehicle position+orientation
float32 vehicle_x
float32 vehicle_y
float32 vehicle_theta
#Vehicle velocities
float32 vehicle_linear_speed
float32 vehicle_angular_speed

#Crane position+orientation
float32 crane_x
float32 crane_y
float32 crane_z
float32 crane_q1
float32 crane_q2
float32 crane_q3
float32 crane_q4

#Crane joints
float32[] crane_joints

#Pan&Tilt Angles
float32 pan_angle
float32 tilt_angle

#Vehicle battery level
float32 battery_level

#Vehicle State
#int32 ROBOT_STOPPED = 0
#int32 WAITING_FOR_COMMAND = 1
#int32 VEHICLE_MOVING = 2
#int32 CRANE_MOVING = 3
#int32 FOLDING_CRANE = 4
#int32 state
string state

# Command being executed
string command
"""
  __slots__ = ['vehicle_x','vehicle_y','vehicle_theta','vehicle_linear_speed','vehicle_angular_speed','crane_x','crane_y','crane_z','crane_q1','crane_q2','crane_q3','crane_q4','crane_joints','pan_angle','tilt_angle','battery_level','state','command']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[]','float32','float32','float32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_x,vehicle_y,vehicle_theta,vehicle_linear_speed,vehicle_angular_speed,crane_x,crane_y,crane_z,crane_q1,crane_q2,crane_q3,crane_q4,crane_joints,pan_angle,tilt_angle,battery_level,state,command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlatformState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vehicle_x is None:
        self.vehicle_x = 0.
      if self.vehicle_y is None:
        self.vehicle_y = 0.
      if self.vehicle_theta is None:
        self.vehicle_theta = 0.
      if self.vehicle_linear_speed is None:
        self.vehicle_linear_speed = 0.
      if self.vehicle_angular_speed is None:
        self.vehicle_angular_speed = 0.
      if self.crane_x is None:
        self.crane_x = 0.
      if self.crane_y is None:
        self.crane_y = 0.
      if self.crane_z is None:
        self.crane_z = 0.
      if self.crane_q1 is None:
        self.crane_q1 = 0.
      if self.crane_q2 is None:
        self.crane_q2 = 0.
      if self.crane_q3 is None:
        self.crane_q3 = 0.
      if self.crane_q4 is None:
        self.crane_q4 = 0.
      if self.crane_joints is None:
        self.crane_joints = []
      if self.pan_angle is None:
        self.pan_angle = 0.
      if self.tilt_angle is None:
        self.tilt_angle = 0.
      if self.battery_level is None:
        self.battery_level = 0.
      if self.state is None:
        self.state = ''
      if self.command is None:
        self.command = ''
    else:
      self.vehicle_x = 0.
      self.vehicle_y = 0.
      self.vehicle_theta = 0.
      self.vehicle_linear_speed = 0.
      self.vehicle_angular_speed = 0.
      self.crane_x = 0.
      self.crane_y = 0.
      self.crane_z = 0.
      self.crane_q1 = 0.
      self.crane_q2 = 0.
      self.crane_q3 = 0.
      self.crane_q4 = 0.
      self.crane_joints = []
      self.pan_angle = 0.
      self.tilt_angle = 0.
      self.battery_level = 0.
      self.state = ''
      self.command = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.vehicle_x, _x.vehicle_y, _x.vehicle_theta, _x.vehicle_linear_speed, _x.vehicle_angular_speed, _x.crane_x, _x.crane_y, _x.crane_z, _x.crane_q1, _x.crane_q2, _x.crane_q3, _x.crane_q4))
      length = len(self.crane_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.crane_joints))
      _x = self
      buff.write(_get_struct_3f().pack(_x.pan_angle, _x.tilt_angle, _x.battery_level))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.vehicle_x, _x.vehicle_y, _x.vehicle_theta, _x.vehicle_linear_speed, _x.vehicle_angular_speed, _x.crane_x, _x.crane_y, _x.crane_z, _x.crane_q1, _x.crane_q2, _x.crane_q3, _x.crane_q4,) = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.crane_joints = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.pan_angle, _x.tilt_angle, _x.battery_level,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.vehicle_x, _x.vehicle_y, _x.vehicle_theta, _x.vehicle_linear_speed, _x.vehicle_angular_speed, _x.crane_x, _x.crane_y, _x.crane_z, _x.crane_q1, _x.crane_q2, _x.crane_q3, _x.crane_q4))
      length = len(self.crane_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.crane_joints.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.pan_angle, _x.tilt_angle, _x.battery_level))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.vehicle_x, _x.vehicle_y, _x.vehicle_theta, _x.vehicle_linear_speed, _x.vehicle_angular_speed, _x.crane_x, _x.crane_y, _x.crane_z, _x.crane_q1, _x.crane_q2, _x.crane_q3, _x.crane_q4,) = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.crane_joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.pan_angle, _x.tilt_angle, _x.battery_level,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
