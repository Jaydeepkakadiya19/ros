# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robospect_msgs/MissionState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robospect_msgs.msg
import geometry_msgs.msg

class MissionState(genpy.Message):
  _md5sum = "0aa03f571a2e38d59ccaad05aabff493"
  _type = "robospect_msgs/MissionState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Mission state from IGC to GCS

#Mission State
string mission_state

#Mission Parameters
float32 max_distance
float32 traveled_distance
float32 step_meters
float32 minimum_crack_length
float32 max_cracks
string mission_command
MissionPoint[] points
int16 current_point

#Vehicle State
PlatformState vehicle_state

#Arm State
float32 tip_x
float32 tip_y
float32 tip_z
float32 tip_q1
float32 tip_q2
float32 tip_q3
float32 tip_q4
float32[] arm_joints
string arm_state

#Camera State
string camera_state
string image_file_name1
string image_file_name2
string profile_file_name
string stereo_file_name1
string stereo_file_name2
int16 crack_pixel_x
int16 crack_pixel_y
float32 crack_position_x
float32 crack_position_y
float32 crack_position_z
float32 crack_orientation_a
float32 crack_orientation_b
float32 crack_orientation_c

#Ultrasonic State
string ultrasonic_state
float32 crack_width
float32 crack_depth

================================================================================
MSG: robospect_msgs/MissionPoint
# Mission Point (from GCS to IGC)

# Tunnel point
geometry_msgs/Point point

#Inspection parameters
bool do_crack_detection
bool do_3D_scan
bool do_stereo_image
bool do_ultrasonic_measurements
bool do_teleop_us

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: robospect_msgs/PlatformState
#State of the vehicle+crane system

#Vehicle position+orientation
float32 vehicle_x
float32 vehicle_y
float32 vehicle_theta
#Vehicle velocities
float32 vehicle_linear_speed
float32 vehicle_angular_speed

#Crane position+orientation
float32 crane_x
float32 crane_y
float32 crane_z
float32 crane_q1
float32 crane_q2
float32 crane_q3
float32 crane_q4

#Crane joints
float32[] crane_joints

#Pan&Tilt Angles
float32 pan_angle
float32 tilt_angle

#Vehicle battery level
float32 battery_level

#Vehicle State
#int32 ROBOT_STOPPED = 0
#int32 WAITING_FOR_COMMAND = 1
#int32 VEHICLE_MOVING = 2
#int32 CRANE_MOVING = 3
#int32 FOLDING_CRANE = 4
#int32 state
string state

# Command being executed
string command
"""
  __slots__ = ['mission_state','max_distance','traveled_distance','step_meters','minimum_crack_length','max_cracks','mission_command','points','current_point','vehicle_state','tip_x','tip_y','tip_z','tip_q1','tip_q2','tip_q3','tip_q4','arm_joints','arm_state','camera_state','image_file_name1','image_file_name2','profile_file_name','stereo_file_name1','stereo_file_name2','crack_pixel_x','crack_pixel_y','crack_position_x','crack_position_y','crack_position_z','crack_orientation_a','crack_orientation_b','crack_orientation_c','ultrasonic_state','crack_width','crack_depth']
  _slot_types = ['string','float32','float32','float32','float32','float32','string','robospect_msgs/MissionPoint[]','int16','robospect_msgs/PlatformState','float32','float32','float32','float32','float32','float32','float32','float32[]','string','string','string','string','string','string','string','int16','int16','float32','float32','float32','float32','float32','float32','string','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mission_state,max_distance,traveled_distance,step_meters,minimum_crack_length,max_cracks,mission_command,points,current_point,vehicle_state,tip_x,tip_y,tip_z,tip_q1,tip_q2,tip_q3,tip_q4,arm_joints,arm_state,camera_state,image_file_name1,image_file_name2,profile_file_name,stereo_file_name1,stereo_file_name2,crack_pixel_x,crack_pixel_y,crack_position_x,crack_position_y,crack_position_z,crack_orientation_a,crack_orientation_b,crack_orientation_c,ultrasonic_state,crack_width,crack_depth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mission_state is None:
        self.mission_state = ''
      if self.max_distance is None:
        self.max_distance = 0.
      if self.traveled_distance is None:
        self.traveled_distance = 0.
      if self.step_meters is None:
        self.step_meters = 0.
      if self.minimum_crack_length is None:
        self.minimum_crack_length = 0.
      if self.max_cracks is None:
        self.max_cracks = 0.
      if self.mission_command is None:
        self.mission_command = ''
      if self.points is None:
        self.points = []
      if self.current_point is None:
        self.current_point = 0
      if self.vehicle_state is None:
        self.vehicle_state = robospect_msgs.msg.PlatformState()
      if self.tip_x is None:
        self.tip_x = 0.
      if self.tip_y is None:
        self.tip_y = 0.
      if self.tip_z is None:
        self.tip_z = 0.
      if self.tip_q1 is None:
        self.tip_q1 = 0.
      if self.tip_q2 is None:
        self.tip_q2 = 0.
      if self.tip_q3 is None:
        self.tip_q3 = 0.
      if self.tip_q4 is None:
        self.tip_q4 = 0.
      if self.arm_joints is None:
        self.arm_joints = []
      if self.arm_state is None:
        self.arm_state = ''
      if self.camera_state is None:
        self.camera_state = ''
      if self.image_file_name1 is None:
        self.image_file_name1 = ''
      if self.image_file_name2 is None:
        self.image_file_name2 = ''
      if self.profile_file_name is None:
        self.profile_file_name = ''
      if self.stereo_file_name1 is None:
        self.stereo_file_name1 = ''
      if self.stereo_file_name2 is None:
        self.stereo_file_name2 = ''
      if self.crack_pixel_x is None:
        self.crack_pixel_x = 0
      if self.crack_pixel_y is None:
        self.crack_pixel_y = 0
      if self.crack_position_x is None:
        self.crack_position_x = 0.
      if self.crack_position_y is None:
        self.crack_position_y = 0.
      if self.crack_position_z is None:
        self.crack_position_z = 0.
      if self.crack_orientation_a is None:
        self.crack_orientation_a = 0.
      if self.crack_orientation_b is None:
        self.crack_orientation_b = 0.
      if self.crack_orientation_c is None:
        self.crack_orientation_c = 0.
      if self.ultrasonic_state is None:
        self.ultrasonic_state = ''
      if self.crack_width is None:
        self.crack_width = 0.
      if self.crack_depth is None:
        self.crack_depth = 0.
    else:
      self.mission_state = ''
      self.max_distance = 0.
      self.traveled_distance = 0.
      self.step_meters = 0.
      self.minimum_crack_length = 0.
      self.max_cracks = 0.
      self.mission_command = ''
      self.points = []
      self.current_point = 0
      self.vehicle_state = robospect_msgs.msg.PlatformState()
      self.tip_x = 0.
      self.tip_y = 0.
      self.tip_z = 0.
      self.tip_q1 = 0.
      self.tip_q2 = 0.
      self.tip_q3 = 0.
      self.tip_q4 = 0.
      self.arm_joints = []
      self.arm_state = ''
      self.camera_state = ''
      self.image_file_name1 = ''
      self.image_file_name2 = ''
      self.profile_file_name = ''
      self.stereo_file_name1 = ''
      self.stereo_file_name2 = ''
      self.crack_pixel_x = 0
      self.crack_pixel_y = 0
      self.crack_position_x = 0.
      self.crack_position_y = 0.
      self.crack_position_z = 0.
      self.crack_orientation_a = 0.
      self.crack_orientation_b = 0.
      self.crack_orientation_c = 0.
      self.ultrasonic_state = ''
      self.crack_width = 0.
      self.crack_depth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mission_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5f().pack(_x.max_distance, _x.traveled_distance, _x.step_meters, _x.minimum_crack_length, _x.max_cracks))
      _x = self.mission_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.point
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5B().pack(_x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us))
      _x = self
      buff.write(_get_struct_h12f().pack(_x.current_point, _x.vehicle_state.vehicle_x, _x.vehicle_state.vehicle_y, _x.vehicle_state.vehicle_theta, _x.vehicle_state.vehicle_linear_speed, _x.vehicle_state.vehicle_angular_speed, _x.vehicle_state.crane_x, _x.vehicle_state.crane_y, _x.vehicle_state.crane_z, _x.vehicle_state.crane_q1, _x.vehicle_state.crane_q2, _x.vehicle_state.crane_q3, _x.vehicle_state.crane_q4))
      length = len(self.vehicle_state.crane_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.vehicle_state.crane_joints))
      _x = self
      buff.write(_get_struct_3f().pack(_x.vehicle_state.pan_angle, _x.vehicle_state.tilt_angle, _x.vehicle_state.battery_level))
      _x = self.vehicle_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vehicle_state.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.tip_x, _x.tip_y, _x.tip_z, _x.tip_q1, _x.tip_q2, _x.tip_q3, _x.tip_q4))
      length = len(self.arm_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.arm_joints))
      _x = self.arm_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.camera_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.image_file_name1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.image_file_name2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.profile_file_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.stereo_file_name1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.stereo_file_name2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2h6f().pack(_x.crack_pixel_x, _x.crack_pixel_y, _x.crack_position_x, _x.crack_position_y, _x.crack_position_z, _x.crack_orientation_a, _x.crack_orientation_b, _x.crack_orientation_c))
      _x = self.ultrasonic_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.crack_width, _x.crack_depth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      if self.vehicle_state is None:
        self.vehicle_state = robospect_msgs.msg.PlatformState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_state = str[start:end].decode('utf-8')
      else:
        self.mission_state = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.max_distance, _x.traveled_distance, _x.step_meters, _x.minimum_crack_length, _x.max_cracks,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_command = str[start:end].decode('utf-8')
      else:
        self.mission_command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = robospect_msgs.msg.MissionPoint()
        _v2 = val1.point
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us,) = _get_struct_5B().unpack(str[start:end])
        val1.do_crack_detection = bool(val1.do_crack_detection)
        val1.do_3D_scan = bool(val1.do_3D_scan)
        val1.do_stereo_image = bool(val1.do_stereo_image)
        val1.do_ultrasonic_measurements = bool(val1.do_ultrasonic_measurements)
        val1.do_teleop_us = bool(val1.do_teleop_us)
        self.points.append(val1)
      _x = self
      start = end
      end += 50
      (_x.current_point, _x.vehicle_state.vehicle_x, _x.vehicle_state.vehicle_y, _x.vehicle_state.vehicle_theta, _x.vehicle_state.vehicle_linear_speed, _x.vehicle_state.vehicle_angular_speed, _x.vehicle_state.crane_x, _x.vehicle_state.crane_y, _x.vehicle_state.crane_z, _x.vehicle_state.crane_q1, _x.vehicle_state.crane_q2, _x.vehicle_state.crane_q3, _x.vehicle_state.crane_q4,) = _get_struct_h12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.vehicle_state.crane_joints = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.vehicle_state.pan_angle, _x.vehicle_state.tilt_angle, _x.vehicle_state.battery_level,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_state.state = str[start:end].decode('utf-8')
      else:
        self.vehicle_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_state.command = str[start:end].decode('utf-8')
      else:
        self.vehicle_state.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.tip_x, _x.tip_y, _x.tip_z, _x.tip_q1, _x.tip_q2, _x.tip_q3, _x.tip_q4,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.arm_joints = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arm_state = str[start:end].decode('utf-8')
      else:
        self.arm_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_state = str[start:end].decode('utf-8')
      else:
        self.camera_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_file_name1 = str[start:end].decode('utf-8')
      else:
        self.image_file_name1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_file_name2 = str[start:end].decode('utf-8')
      else:
        self.image_file_name2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profile_file_name = str[start:end].decode('utf-8')
      else:
        self.profile_file_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stereo_file_name1 = str[start:end].decode('utf-8')
      else:
        self.stereo_file_name1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stereo_file_name2 = str[start:end].decode('utf-8')
      else:
        self.stereo_file_name2 = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.crack_pixel_x, _x.crack_pixel_y, _x.crack_position_x, _x.crack_position_y, _x.crack_position_z, _x.crack_orientation_a, _x.crack_orientation_b, _x.crack_orientation_c,) = _get_struct_2h6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ultrasonic_state = str[start:end].decode('utf-8')
      else:
        self.ultrasonic_state = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.crack_width, _x.crack_depth,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mission_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5f().pack(_x.max_distance, _x.traveled_distance, _x.step_meters, _x.minimum_crack_length, _x.max_cracks))
      _x = self.mission_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v3 = val1.point
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_5B().pack(_x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us))
      _x = self
      buff.write(_get_struct_h12f().pack(_x.current_point, _x.vehicle_state.vehicle_x, _x.vehicle_state.vehicle_y, _x.vehicle_state.vehicle_theta, _x.vehicle_state.vehicle_linear_speed, _x.vehicle_state.vehicle_angular_speed, _x.vehicle_state.crane_x, _x.vehicle_state.crane_y, _x.vehicle_state.crane_z, _x.vehicle_state.crane_q1, _x.vehicle_state.crane_q2, _x.vehicle_state.crane_q3, _x.vehicle_state.crane_q4))
      length = len(self.vehicle_state.crane_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.vehicle_state.crane_joints.tostring())
      _x = self
      buff.write(_get_struct_3f().pack(_x.vehicle_state.pan_angle, _x.vehicle_state.tilt_angle, _x.vehicle_state.battery_level))
      _x = self.vehicle_state.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vehicle_state.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.tip_x, _x.tip_y, _x.tip_z, _x.tip_q1, _x.tip_q2, _x.tip_q3, _x.tip_q4))
      length = len(self.arm_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.arm_joints.tostring())
      _x = self.arm_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.camera_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.image_file_name1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.image_file_name2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.profile_file_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.stereo_file_name1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.stereo_file_name2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2h6f().pack(_x.crack_pixel_x, _x.crack_pixel_y, _x.crack_position_x, _x.crack_position_y, _x.crack_position_z, _x.crack_orientation_a, _x.crack_orientation_b, _x.crack_orientation_c))
      _x = self.ultrasonic_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.crack_width, _x.crack_depth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      if self.vehicle_state is None:
        self.vehicle_state = robospect_msgs.msg.PlatformState()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_state = str[start:end].decode('utf-8')
      else:
        self.mission_state = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.max_distance, _x.traveled_distance, _x.step_meters, _x.minimum_crack_length, _x.max_cracks,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_command = str[start:end].decode('utf-8')
      else:
        self.mission_command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = robospect_msgs.msg.MissionPoint()
        _v4 = val1.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.do_crack_detection, _x.do_3D_scan, _x.do_stereo_image, _x.do_ultrasonic_measurements, _x.do_teleop_us,) = _get_struct_5B().unpack(str[start:end])
        val1.do_crack_detection = bool(val1.do_crack_detection)
        val1.do_3D_scan = bool(val1.do_3D_scan)
        val1.do_stereo_image = bool(val1.do_stereo_image)
        val1.do_ultrasonic_measurements = bool(val1.do_ultrasonic_measurements)
        val1.do_teleop_us = bool(val1.do_teleop_us)
        self.points.append(val1)
      _x = self
      start = end
      end += 50
      (_x.current_point, _x.vehicle_state.vehicle_x, _x.vehicle_state.vehicle_y, _x.vehicle_state.vehicle_theta, _x.vehicle_state.vehicle_linear_speed, _x.vehicle_state.vehicle_angular_speed, _x.vehicle_state.crane_x, _x.vehicle_state.crane_y, _x.vehicle_state.crane_z, _x.vehicle_state.crane_q1, _x.vehicle_state.crane_q2, _x.vehicle_state.crane_q3, _x.vehicle_state.crane_q4,) = _get_struct_h12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.vehicle_state.crane_joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.vehicle_state.pan_angle, _x.vehicle_state.tilt_angle, _x.vehicle_state.battery_level,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_state.state = str[start:end].decode('utf-8')
      else:
        self.vehicle_state.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle_state.command = str[start:end].decode('utf-8')
      else:
        self.vehicle_state.command = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.tip_x, _x.tip_y, _x.tip_z, _x.tip_q1, _x.tip_q2, _x.tip_q3, _x.tip_q4,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.arm_joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arm_state = str[start:end].decode('utf-8')
      else:
        self.arm_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_state = str[start:end].decode('utf-8')
      else:
        self.camera_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_file_name1 = str[start:end].decode('utf-8')
      else:
        self.image_file_name1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_file_name2 = str[start:end].decode('utf-8')
      else:
        self.image_file_name2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profile_file_name = str[start:end].decode('utf-8')
      else:
        self.profile_file_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stereo_file_name1 = str[start:end].decode('utf-8')
      else:
        self.stereo_file_name1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stereo_file_name2 = str[start:end].decode('utf-8')
      else:
        self.stereo_file_name2 = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.crack_pixel_x, _x.crack_pixel_y, _x.crack_position_x, _x.crack_position_y, _x.crack_position_z, _x.crack_orientation_a, _x.crack_orientation_b, _x.crack_orientation_c,) = _get_struct_2h6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ultrasonic_state = str[start:end].decode('utf-8')
      else:
        self.ultrasonic_state = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.crack_width, _x.crack_depth,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_2h6f = None
def _get_struct_2h6f():
    global _struct_2h6f
    if _struct_2h6f is None:
        _struct_2h6f = struct.Struct("<2h6f")
    return _struct_2h6f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_h12f = None
def _get_struct_h12f():
    global _struct_h12f
    if _struct_h12f is None:
        _struct_h12f = struct.Struct("<h12f")
    return _struct_h12f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
