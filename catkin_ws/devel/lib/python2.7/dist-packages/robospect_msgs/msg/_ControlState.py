# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robospect_msgs/ControlState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robospect_msgs.msg

class ControlState(genpy.Message):
  _md5sum = "1fcaac5fabdba48ca3ff538da6d41794"
  _type = "robospect_msgs/ControlState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Robot mission states definition
int32 ROBOT_STOPPED=0				# 0. Robot is stopped
int32 DEFECT_DETECTION=1			# 1. Defect Detection Cameras take snapshot
int32 LASER_SCAN=2				# 3. 3D Laser Scanner takes Measurement
int32 SEND_DISTANCE_FROM_WALL=3			# 4. Robotic Platform sends distance from wall to computer vision system (from robotic laser)
int32 LOCATE_CRACK_POSITION=4			# 5. Computer Vision calculates X Y Z coordinates of crack
int32 MOVE_CRANE_TO_CRACK=5			# 6. Robotic Crane or Tip move closer to crack
int32 CAPTURE_3D_CRACK_SNAPSHOT=6		# 7. Stereo Cameras getting 3D snapshot of crack
int32 MOVE_ARM_TO_CRACK=8			# 8. UltraSonic Sensors Attached to the wall (on crack)
int32 MEASURE_CRACK=9				# 9. UltraSonic Sensors take measurement
int32 CAPTURE_3D_CRACK_SNAPSHOT_OF_SENSOR=10	# 10. Stereo Cameras take stereo-image of sensor onto crack
int32 ROBOT_MOVING_TO_NEXT_POINT=11		# 11. Robot moves to next position and proceeds 1 step*

# Robot general state
State state

# Robot mission state
int32 mission_state

# Robot status
int32 robot_status

# Robot pose (m)
float32 pose_x
float32 pose_y
# (radians)
float32 pose_yaw

# Robot velocity (m/s)
float32 velocity

# Robot battery
float32 battery_voltage
float32 battery_percentage

# Components status?



================================================================================
MSG: robospect_msgs/State
# constants
int32 INIT_STATE = 100
int32 STANDBY_STATE = 200
int32 READY_STATE = 300
int32 EMERGENCY_STATE = 400
int32 FAILURE_STATE = 500
int32 SHUTDOWN_STATE = 600
int32 UNKNOWN_STATE = 700
int32 MANUAL_STATE = 800
int32 SPECIAL_STATE = 900
int32 CHARGE_STATE = 1000
int32 PARKING_STATE = 1100

# state of the component
int32 state
# desired control loop frecuency
float32 desired_freq
# real frecuency 
float32 real_freq
# Description of the state
string state_description
# Control mode (POSITION, VELOCITY)
string control_mode
"""
  # Pseudo-constants
  ROBOT_STOPPED = 0
  DEFECT_DETECTION = 1
  LASER_SCAN = 2
  SEND_DISTANCE_FROM_WALL = 3
  LOCATE_CRACK_POSITION = 4
  MOVE_CRANE_TO_CRACK = 5
  CAPTURE_3D_CRACK_SNAPSHOT = 6
  MOVE_ARM_TO_CRACK = 8
  MEASURE_CRACK = 9
  CAPTURE_3D_CRACK_SNAPSHOT_OF_SENSOR = 10
  ROBOT_MOVING_TO_NEXT_POINT = 11

  __slots__ = ['state','mission_state','robot_status','pose_x','pose_y','pose_yaw','velocity','battery_voltage','battery_percentage']
  _slot_types = ['robospect_msgs/State','int32','int32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,mission_state,robot_status,pose_x,pose_y,pose_yaw,velocity,battery_voltage,battery_percentage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = robospect_msgs.msg.State()
      if self.mission_state is None:
        self.mission_state = 0
      if self.robot_status is None:
        self.robot_status = 0
      if self.pose_x is None:
        self.pose_x = 0.
      if self.pose_y is None:
        self.pose_y = 0.
      if self.pose_yaw is None:
        self.pose_yaw = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.battery_percentage is None:
        self.battery_percentage = 0.
    else:
      self.state = robospect_msgs.msg.State()
      self.mission_state = 0
      self.robot_status = 0
      self.pose_x = 0.
      self.pose_y = 0.
      self.pose_yaw = 0.
      self.velocity = 0.
      self.battery_voltage = 0.
      self.battery_percentage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2f().pack(_x.state.state, _x.state.desired_freq, _x.state.real_freq))
      _x = self.state.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.mission_state, _x.robot_status, _x.pose_x, _x.pose_y, _x.pose_yaw, _x.velocity, _x.battery_voltage, _x.battery_percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = robospect_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.state, _x.state.desired_freq, _x.state.real_freq,) = _get_struct_i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.state_description = str[start:end].decode('utf-8')
      else:
        self.state.state_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.control_mode = str[start:end].decode('utf-8')
      else:
        self.state.control_mode = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.mission_state, _x.robot_status, _x.pose_x, _x.pose_y, _x.pose_yaw, _x.velocity, _x.battery_voltage, _x.battery_percentage,) = _get_struct_2i6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2f().pack(_x.state.state, _x.state.desired_freq, _x.state.real_freq))
      _x = self.state.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i6f().pack(_x.mission_state, _x.robot_status, _x.pose_x, _x.pose_y, _x.pose_yaw, _x.velocity, _x.battery_voltage, _x.battery_percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = robospect_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.state, _x.state.desired_freq, _x.state.real_freq,) = _get_struct_i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.state_description = str[start:end].decode('utf-8')
      else:
        self.state.state_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.control_mode = str[start:end].decode('utf-8')
      else:
        self.state.control_mode = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.mission_state, _x.robot_status, _x.pose_x, _x.pose_y, _x.pose_yaw, _x.velocity, _x.battery_voltage, _x.battery_percentage,) = _get_struct_2i6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i6f = None
def _get_struct_2i6f():
    global _struct_2i6f
    if _struct_2i6f is None:
        _struct_2i6f = struct.Struct("<2i6f")
    return _struct_2i6f
_struct_i2f = None
def _get_struct_i2f():
    global _struct_i2f
    if _struct_i2f is None:
        _struct_i2f = struct.Struct("<i2f")
    return _struct_i2f
